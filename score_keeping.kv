#:import DeductionButton deduction_buttons.DeductionButton
#:import iffloat kivymd.utils.iffloat

<ScoreKeeping>:
    canvas.before:
        Color:
            rgba: app.theme_cls.primary_color
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [0, dp(125), 0, dp(125)]

    MDIconButton:
    	icon: 'home'
    	pos_hint: {'top': 1}
    	x: 0
        theme_text_color: 'Custom'
        icon_color: self.theme_cls.primary_color
        on_release:
            root.save()
            app.root.current = 'home'
        canvas.before:
        	Color:
        		rgba: self.theme_cls.bg_dark
        	RoundedRectangle:
        		pos: self.pos
        		size: self.size
        		radius: [0, 0, dp(25), 0]

	# Contestant's Name
    Widget:
    	id: cname
        pos_hint: {'right': 1, 'top': 1}
    	size_hint: 0.8, None
        height: dp(45)
        canvas.before:
        	Color:
        		rgba: app.theme_cls.bg_normal
        	RoundedRectangle:
        		pos: self.pos
        		size: self.size
        		radius: [0, 0, 0, dp(25)]

    MDTextField:
        id: name_field
    	pos_hint: {'right': .990}
    	line_color_normal: 0,0,0,0.001
    	line_color_focus: 0,0,0,0.001
        y: cname.y - dp(10)
    	size_hint: 0.78, None
        halign: 'right'
        height: dp(45)
        font_size: sp(22)
        color_mode: "custom"
    	text_color_normal: self.theme_cls.primary_color
    	text_color_focus: 0,0,0,1
    	on_text:
    	    root.contestant.name = self.text

    # Total Score
    MDLabel:
    	id: total_score
    	text: str(iffloat(sum(root.contestant.score))) + '/' + str(iffloat(app.max_score))
    	progress: self.width * sum(root.contestant.score) / app.max_score
    	pos_hint: {'right': 1}
    	top: cname.y
    	size_hint: .5, None
        size: dp(100), dp(45)
        halign: 'center'
        font_size: sp(20)
        canvas.before:
        	Color:
        		rgba: self.theme_cls.bg_dark
        	RoundedRectangle:
        		pos: self.pos
        		size: self.size
        		radius: [0, 0, 0, dp(25)]

        	Color:
        		rgba: 0, .7, 0, 1
        	RoundedRectangle:
        		pos: (self.x + (self.width - (self.progress or 0))), self.y
        		size: self.progress or 100, self.height
        		radius: [0, 0, 0, dp(25)]

    # Intonation Box
    MDLabel:
    	text: str(iffloat(root.contestant.score[0])) + '/' + str(iffloat(app.max_scores[0]))
    	progress: self.width * (root.contestant.score[0] or 0.001) / app.max_scores[0]
    	valign: 'bottom'
    	halign: 'center'
    	size_hint: None, None
    	size: intonation_box.width - dp(40), dp(30)
    	top: intonation_box.y
    	x: intonation_box.x
        canvas.before:
        	Color:
        		rgba: app.theme_cls.bg_darkest
        	RoundedRectangle:
        		pos: self.pos
        		size: self.width, dp(60)
        		radius: [0, 0, 0, dp(25)]

        	Color:
        		rgba: 0, .7, 0, 1
        	RoundedRectangle:
        		pos: (self.x + (self.width - (self.progress or 0))), self.y
        		size: self.progress or 100, dp(60)
        		radius: [0, 0, 0, dp(25)]

    MDLabel:
    	text: "-" + str(iffloat(round((app.max_scores[0] - root.contestant.score[0]), 1)))
    	valign: 'bottom'
    	halign: 'center'
    	color: 1,1,1,1
    	size_hint: None, None
    	size: dp(40), dp(30)
    	top: intonation_box.y
    	right: intonation_box.right
        canvas.before:
        	Color:
        		rgba: 1, 0, 0, 1
        	RoundedRectangle:
        		pos: self.pos
        		size: self.width, dp(60)
        		radius: [0, 0, dp(25), 0]

    MDCard:
    	id: intonation_box
    	height: mistakes_box.height - dp(120)
    	size_hint: 0.48, None
    	center_x: total_score.center_x
    	top: total_score.y - dp(10)
    	radius: [dp(25)]
    	orientation: 'vertical'
    	padding: dp(10), 0, dp(10), dp(10)
    	spacing: dp(5)
    	MDLabel:
    		text: app.text['intonation']
    		halign: 'center'
    		font_size: sp(22)
    		size_hint: 1, 1
    	DeductionButton:
    		text: app.text['qalqala'] + " " + str(app.intonation_deductions[0]) + '-'
    		size_hint: 1, 1
    		count: root.contestant.intonation[0]
    		on_release:
    		    root.contestant.intonation[0] += 1
    		    root.contestant.score[0] = round(root.contestant.score[0] - app.intonation_deductions[0], 1)

    	DeductionButton:
    		text: app.text['guna'] + " " + str(app.intonation_deductions[1]) + '-'
    		size_hint: 1, 1
    		count: root.contestant.intonation[1]
    		on_release:
    		    root.contestant.intonation[1] += 1
    		    root.contestant.score[0] = round(root.contestant.score[0] - app.intonation_deductions[1], 1)

    	DeductionButton:
    		text: app.text['exit'] + " " + str(app.intonation_deductions[2]) + '-'
    		size_hint: 1, 1
    		count: root.contestant.intonation[2]
    		on_release:
    		    root.contestant.intonation[2] += 1
    		    root.contestant.score[0] = round(root.contestant.score[0] - app.intonation_deductions[2], 1)

    	DeductionButton:
    		text: app.text['mdd'] + " " + str(app.intonation_deductions[3]) + '-'
    		size_hint: 1, 1
    		count: root.contestant.intonation[3]
    		on_release:
    		    root.contestant.intonation[3] += 1
    		    root.contestant.score[0] = round(root.contestant.score[0] - app.intonation_deductions[3], 1)

    	MDFillRoundFlatButton:
    		text: app.text['revert'] + " " + str(app.intonation_deductions[4]) + '+'
    		size_hint: 1, 1
    		font_size: sp(17)
    		md_bg_color: 0, 0.75, 0, 1
    		on_release:
    		    root.contestant.score[0] = round(root.contestant.score[0] + app.intonation_deductions[4], 1) if root.contestant.score[0] < app.max_scores[0] else root.contestant.score[0]

	# Mistakes Box
    MDLabel:
    	text: str(iffloat(root.contestant.score[1])) + '/' + str(iffloat(app.max_scores[1]))
    	progress: self.width * (root.contestant.score[1] or 00.1) / app.max_scores[1]
    	valign: 'bottom'
    	halign: 'center'
    	size_hint: None, None
    	size: mistakes_box.width - dp(40), dp(30)
    	top: mistakes_box.y
    	x: mistakes_box.x
        canvas.before:
        	Color:
        		rgba: app.theme_cls.bg_darkest
        	RoundedRectangle:
        		pos: self.pos
        		size: self.width, dp(60)
        		radius: [0, 0, 0, dp(25)]

        	Color:
        		rgba: 0, .7, 0, 1
        	RoundedRectangle:
        		pos: (self.x + (self.width - (self.progress or 0))), self.y
        		size: self.progress or 100, dp(60)
        		radius: [0, 0, 0, dp(25)]

    MDLabel:
    	text: "-" + str(iffloat(app.max_scores[1] - root.contestant.score[1]))
    	valign: 'bottom'
    	halign: 'center'
    	color: 1,1,1,1
    	size_hint: None, None
    	size: dp(40), dp(30)
    	top: mistakes_box.y
    	right: mistakes_box.right
        canvas.before:
            Color:
                rgba: 1, 0, 0, 1
            RoundedRectangle:
                pos: self.pos
                size: self.width, dp(60)
                radius: [0, 0, dp(25), 0]

    MDCard:
        id: mistakes_box
        size_hint: 0.48, .7
        height: dp(405) if root.height * 0.55 < dp(405) else root.height * 0.55
        center_x: total_score.center_x - root.width / 2
        top: cname.y - dp(10)
        radius: [dp(25)]
        padding: dp(5), 0, dp(5), dp(10)
        spacing: dp(5)
        orientation: 'vertical'
        MDLabel:
            text: app.text['memorizing']
            halign: 'center'
            font_size: sp(22)
            size_hint: 1, .1
        MDBoxLayout:
            md_bg_color: app.theme_cls.accent_color
            radius: [dp(25)]
            pos_hint: {'center_x': 0.5}
            orientation: 'vertical'
            size_hint: 1, .5
            padding: dp(5), dp(5), dp(5), dp(5)
	    	spacing: dp(5)
#	    	adaptive_height: True
            DeductionButton:
                text: app.text['mistake'] + " " + str(app.memorizing_deductions[0]) + '-'
                size_hint: 1, 1
                deduction: app.memorizing_deductions[0]
                count: root.contestant.memorizing[0]
                index: 0
                on_press:
                    deduct_button.deduction = self

            DeductionButton:
                text: app.text['2 mistakes'] + " " + str(app.memorizing_deductions[1]) + '-'
                size_hint: 1, 1
                deduction: app.memorizing_deductions[1]
                count: root.contestant.memorizing[1]
                index: 1
                on_press:
                    deduct_button.deduction = self

            DeductionButton:
                text: app.text['help'] + " " + str(app.memorizing_deductions[2]) + '-'
                size_hint: 1, 1
                deduction: app.memorizing_deductions[2]
                count: root.contestant.memorizing[2]
                index: 2
                on_press:
                    deduct_button.deduction = self

            MDFillRoundFlatButton:
                id: deduct_button
                deduction: None
                text: app.text['deduct'] + " " + str(app.memorizing_deductions[self.deduction.index]) + '-' if self.deduction else app.text['deduct'] + " 0 "
                size_hint: 1, 1
                font_size: sp(17)
                md_bg_color: 1, 0, 0, 1
                disabled: not self.deduction
                on_release:
    			    root.contestant.memorizing[self.deduction.index] += 1
        		    root.contestant.score[1] = round(root.contestant.score[1] - self.deduction.deduction, 1)
                    self.deduction = False

        MDBoxLayout:
            md_bg_color: app.theme_cls.accent_color
            radius: [dp(25)]
            pos_hint: {'center_x': 0.5}
            orientation: 'vertical'
            size_hint: 1, .3
            padding: dp(5), dp(5), dp(5), dp(5)
            spacing: dp(5)
#            adaptive_height: True
            DeductionButton:
                id: timer
                text: str(root.seconds)
                font_size: sp(18)
                size_hint: 1, 1
                md_bg_color: 0, 1, 0, 1
                count: root.contestant.memorizing[3]
                theme_text_color: 'Custom'
                text_color: 0,0,0,1
                on_release:
                    root.timer_button()

            MDLabel:
                text: app.text['silence']
                size_hint: 1, .3
                font_size: sp(20)
                color: self.theme_cls.primary_dark
                height: dp(15)
                halign: 'center'
                pos_hint: {'center_x': 0.5}

            MDFillRoundFlatButton:
                text: app.text['deduct'] + " " + str(app.memorizing_deductions[3]) + '-'
                size_hint: 1, 1
                font_size: sp(17)
                md_bg_color: 1, 0, 0, 1
                disabled: int(timer.text or '0') != 0
                on_release:
                    root.contestant.score[1] = round(root.contestant.score[1] - app.memorizing_deductions[3], 1)
                    root.reset_timer()

        MDFillRoundFlatButton:
            text: app.text['revert'] + " " + str(app.memorizing_deductions[4]) + '+'
            size_hint: .8, .1
            font_size: sp(17)
            md_bg_color: 0, 0.75, 0, 1
            pos_hint: {'center_x': 0.5}
            height: dp(50)
            on_release:
                root.contestant.score[1] = round(root.contestant.score[1] + app.memorizing_deductions[4], 1) if root.contestant.score[1] < app.max_scores[1] else root.contestant.score[1]


	# Performance_Box
    MDCard:
        size_hint: 0.48, None
        height: dp(90)
        radius: [dp(25)]
        center_x: intonation_box.center_x
        top: intonation_box.y - dp(40)
        orientation: 'vertical'
        MDLabel:
            text: app.text['performance']
            halign: 'center'
            font_size: sp(22)
            size_hint: 1, 0.4
        MDBoxLayout:
            MDIconButton:
                icon: 'plus'
                size_hint: 1,1
                on_release:
                    if root.contestant.score[2] < app.max_scores[2]: root.contestant.score[2] += .5
            MDLabel:
                text: str(root.contestant.score[2])
                size_hint: 1, 1
                halign: 'center'
                font_size: sp(30)
            MDIconButton:
                icon: 'minus'
                size_hint: 1,1
                on_release:
                    if root.contestant.score[2] > 0: root.contestant.score[2] -= .5

    # Alarm
    MDIconButton:
        icon: "bell-ring"
        size_hint: 0.48, 0.12
        center_x: mistakes_box.center_x
        top: mistakes_box.y - dp(40)
        theme_icon_color: "Custom"
        icon_color: 1,0,0,1
        text_font_size: sp(50)
        font_size: sp(50)
        md_bg_color: self.theme_cls.accent_color
        size: dp(70), dp(70)
        on_press:
            root.alarm.play()

#   ToDo in the Future
#	MDFillRoundFlatButton:
#		text: app.text['details']
#		size_hint: 0.80 , None
#		pos_hint: {'center_x': 0.5}
#		y: 0
#		md_bg_color: app.theme_cls.accent_color
#		canvas.before:
#			Color:
#				rgba: app.theme_cls.accent_color
#			RoundedRectangle:
#				pos: self.pos
#				size: self.width, self.height + 5
#				radius: [dp(20), dp(20), 0, 0]
#
